name: Docker Image CI

on:
  push:
    branches: [ "develop" ]
  pull_request:
    branches: [ "develop" ]

env:
  # Use docker.io for Docker Hub if empty
  REGISTRY: ghcr.io
  # github.repository as <account>/<repo>
  IMAGE_NAME: ${{ github.repository }}


jobs:
  build:
    runs-on: ubuntu-latest
    steps:  
    # - uses: docker/login-action@v2
    #   name: Login to GitHub Container Registry
    #   with:
    #     registry: ghcr.io
    #     username: ${{ github.actor }}
    #     password: ${{ secrets.MY_GITHUB_TOKEN }}

    - uses: docker/login-action@v2
      name: Login to Docker Hub
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
        uses: actions/checkout@v3
        name: Build the Docker image
        run: docker pull robotframework/rfdocker \
            docker push hcardamone/hcardamonerobotframework:latest
    
    #-
        # name: Login to ACR
        # uses: docker/login-action@v2
        # with:
        #   registry: <registry-name>.azurecr.io
        #   username: ${{ secrets.AZURE_CLIENT_ID }}
        #   password: ${{ secrets.AZURE_CLIENT_SECRET }}
        #   # https://azuresdkdocs.blob.core.windows.net/$web/dotnet/Azure.Identity/1.0.0/api/Azure.Identity/Azure.Identity.EnvironmentCredential.html

    container:
      image: hcardamone/hcardamonerobotframework:latest

            # - docker run \
            # -v <local path to the reports' folder>:/opt/robotframework/reports:Z \
            # -v <local path to the test suites' folder>:/opt/robotframework/tests:Z \
            #     ppodgorsek/robot-framework:<version>
      #docker build . --file Dockerfile --tag ubuntu/robotframework:$(31/07/2022 +%s)


# # Passo 01: Instancio uma imagem de SO linux, no caso usei o FEDORA,
# # mas pode ser o Ubunto, Alpine, Debian, etc...
# # Procure no Docker Hub a imagem que desejar! https://hub.docker.com
# FROM 

# # Passo 02: Vou mapear os volumes (diretórios do container) onde deixarei
# # os testes (inputs) e os resultados (outputs).
# VOLUME /opt/robotframework/results
# VOLUME /opt/robotframework/tests

# # Passo 03: Vou rodar os comandos que instalam tudo que preciso para rodar o robot
# # nesse container linux. Como estou usando o FEDORA, os comandos aqui executados
# # devem ser compatíveis com ele!!
# RUN dnf upgrade -y && dnf install -y python37
# RUN python3 -m pip install --upgrade pip

# # Passo 04: Instalo o Robot e as libraries que precisarei. No caso abaixo,
# # especifiquei a versão do robot que eu quero e não especifiquei a da
# # library Faker, com isso ele pegara a mais recente liberada.
# # Obs.: As barras são para indicar quebra de linha, mas o comando é um só,
# # é como se eu tivesso rodando tudo numa linha só.
# RUN pip3 install robotframework
# RUN pip3 install pyyaml
# RUN pip3 install geckodriver-autoinstaller
# RUN export PATH=$PATH:/usr/local/bin/chromedriver
# RUN pip3 install robotframework-faker
# RUN pip3 install robotframework-requests==0.5.0
# RUN pip3 install robotframework-seleniumlibrary
# RUN pip3 install robotframework-databaselibrary
# RUN pip3 install robotframework-seleniumlibrary==5.1.3